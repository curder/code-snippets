import{_ as t,c as d,o as e,a2 as o}from"./chunks/framework.DjyxGeXd.js";const u=JSON.parse('{"title":"Docker 命令","description":"","frontmatter":{},"headers":[],"relativePath":"others/docker-commands-essentials.md","filePath":"others/docker-commands-essentials.md","lastUpdated":1724755803000}'),r={name:"others/docker-commands-essentials.md"},c=o('<h1 id="docker-命令" tabindex="-1">Docker 命令 <a class="header-anchor" href="#docker-命令" aria-label="Permalink to &quot;Docker 命令&quot;">​</a></h1><h2 id="版本和信息" tabindex="-1">版本和信息 <a class="header-anchor" href="#版本和信息" aria-label="Permalink to &quot;版本和信息&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker --version</code></td><td>Docker版本</td></tr><tr><td><code>docker info</code></td><td>Docker信息</td></tr></tbody></table><h2 id="容器-container" tabindex="-1">容器 Container <a class="header-anchor" href="#容器-container" aria-label="Permalink to &quot;容器 Container&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docekr stats</code></td><td>容器资源使用情况</td></tr><tr><td><code>docker ps</code></td><td>查看运行中的容器</td></tr><tr><td><code>docker ps -a</code></td><td>查看所有容器</td></tr><tr><td><code>docker run &lt;image&gt;</code></td><td>从镜像运行容器</td></tr><tr><td><code>docker run -d &lt;image&gt;</code></td><td>从镜像运行容器（后台）</td></tr><tr><td><code>docker run --name ‹name&gt; &lt;image&gt;</code></td><td>从镜像运行容器并命名</td></tr><tr><td><code>docker run -it &lt;image&gt; &lt;bash&gt;</code></td><td>从镜像运行容器并交互</td></tr><tr><td><code>docker run -it --rm &lt;image&gt; &lt;bash&gt;</code></td><td>从镜像运行容器并删除</td></tr><tr><td><code>docker stop &lt;container&gt;</code></td><td>停止容器</td></tr><tr><td><code>docker start &lt;container&gt;</code></td><td>启动容器</td></tr><tr><td><code>docker restart &lt;container&gt;</code></td><td>重启容器</td></tr><tr><td><code>docker rm &lt;container&gt;</code></td><td>删除容器</td></tr><tr><td><code>docker exec -it &lt;container&gt; /bin/bash</code></td><td>进入容器</td></tr><tr><td><code>docker logs &lt;container&gt;</code></td><td>查看容器日志</td></tr><tr><td><code>docker top &lt;container&gt;</code></td><td>查看容器进程</td></tr><tr><td><code>docker inspect &lt;container&gt;</code></td><td>查看容器详细信息</td></tr><tr><td><code>docker cp &lt;container&gt;:&lt;path&gt; &lt;path&gt;</code></td><td>从容器复制文件到主机</td></tr><tr><td><code>docker cp &lt;path&gt; &lt;container&gt;:&lt;path&gt;</code></td><td>从主机复制文件到容器</td></tr><tr><td><code>docker commit &lt;container&gt; &lt;image&gt;</code></td><td>从容器创建镜像</td></tr><tr><td><code>docker export &lt;container&gt; -o &lt;file.tar&gt;</code></td><td>导出容器为 tar 文件</td></tr></tbody></table><h2 id="镜像-images" tabindex="-1">镜像 Images <a class="header-anchor" href="#镜像-images" aria-label="Permalink to &quot;镜像 Images&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker images</code></td><td>查看所有镜像</td></tr><tr><td><code>docker pull &lt;image&gt;</code></td><td>从 Docker Hub 拉取镜像</td></tr><tr><td><code>docker push &lt;name&gt;:&lt;tag&gt;</code></td><td>推送镜像到 Docker Hub</td></tr><tr><td><code>docker rmi &lt;image&gt;</code></td><td>删除镜像</td></tr><tr><td><code>docker build -t &lt;name&gt;:&lt;tag&gt; &lt;path&gt;</code></td><td>从 Dockerfile 构建镜像</td></tr><tr><td><code>docker tag &lt;image&gt; &lt;new_name&gt;:&lt;tag&gt;</code></td><td>使用新名称或版本标记镜像</td></tr><tr><td><code>docker save &lt;image&gt; -o &lt;path&gt;</code></td><td>保存镜像到文件</td></tr><tr><td><code>docker load -i &lt;path&gt;</code></td><td>从文件加载镜像</td></tr><tr><td><code>docker inspect &lt;image&gt;</code></td><td>查看镜像详细信息</td></tr><tr><td><code>docker import &lt;file.tar&gt; &lt;image_name&gt;</code></td><td>导入 tar 文件为镜像</td></tr></tbody></table><h2 id="网络-network" tabindex="-1">网络 Network <a class="header-anchor" href="#网络-network" aria-label="Permalink to &quot;网络 Network&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker network ls</code></td><td>查看所有网络</td></tr><tr><td><code>docker network create &lt;name&gt;</code></td><td>创建网络</td></tr><tr><td><code>docker network inspect &lt;network&gt;</code></td><td>查看网络详细信息</td></tr><tr><td><code>docker network rm &lt;network&gt;</code></td><td>删除网络</td></tr><tr><td><code>docker network connect &lt;network&gt; &lt;container&gt;</code></td><td>连接容器到网络</td></tr><tr><td><code>docker network disconnect &lt;network&gt; &lt;container&gt;</code></td><td>从网络断开容器</td></tr><tr><td><code>docker network disconnect --force &lt;network&gt; &lt;container&gt;</code></td><td>强制从网络断开容器</td></tr><tr><td><code>docker network prune</code></td><td>删除所有未使用的网络</td></tr></tbody></table><h2 id="卷-volumes" tabindex="-1">卷 Volumes <a class="header-anchor" href="#卷-volumes" aria-label="Permalink to &quot;卷 Volumes&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker volume ls</code></td><td>查看所有卷</td></tr><tr><td><code>docker volume create &lt;name&gt;</code></td><td>创建卷</td></tr><tr><td><code>docker volume inspect &lt;volume&gt;</code></td><td>查看卷详细信息</td></tr><tr><td><code>docker volume rm &lt;volume&gt;</code></td><td>删除卷</td></tr><tr><td><code>docker volume prune</code></td><td>删除所有未使用的卷</td></tr><tr><td><code>docker run -v &lt;volume&gt;:/path &lt;image&gt;</code></td><td>在容器中挂载卷</td></tr><tr><td><code>docker volume mount &lt;volume&gt;</code></td><td>挂载卷</td></tr><tr><td><code>docker volume unmount &lt;volume&gt;</code></td><td>卸载卷</td></tr><tr><td><code>docker volume update &lt;volume&gt;</code></td><td>更新卷</td></tr></tbody></table><h2 id="日志-logs" tabindex="-1">日志 Logs <a class="header-anchor" href="#日志-logs" aria-label="Permalink to &quot;日志 Logs&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker logs &lt;container&gt;</code></td><td>查看容器日志</td></tr><tr><td><code>docker logs -f &lt;container&gt;</code></td><td>查看容器日志并实时更新</td></tr><tr><td><code>docker logs --tail &lt;number&gt; &lt;container&gt;</code></td><td>查看容器日志的最后几行</td></tr></tbody></table><h2 id="清理-docker" tabindex="-1">清理 Docker <a class="header-anchor" href="#清理-docker" aria-label="Permalink to &quot;清理 Docker&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker system prune</code></td><td>清理未使用的镜像、容器、卷和网络</td></tr><tr><td><code>docker system prune -a</code></td><td>清理所有未使用的镜像、容器、卷和网络</td></tr><tr><td><code>docker system prune -f</code></td><td>强制清理未使用的镜像、容器、卷和网络</td></tr><tr><td><code>docker system prune -a -f</code></td><td>强制清理所有未使用的镜像、容器、卷和网络</td></tr><tr><td><code>docker container prune</code></td><td>清理未使用的容器</td></tr><tr><td><code>docker image prune</code></td><td>清理未使用的镜像</td></tr><tr><td><code>docker volume prune</code></td><td>清理未使用的卷</td></tr><tr><td><code>docker network prune</code></td><td>清理未使用的网络</td></tr><tr><td><code>docker system df</code></td><td>查看Docker资源使用情况</td></tr></tbody></table><h2 id="docker-compose" tabindex="-1">Docker Compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;Docker Compose&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>docker-compose up</code></td><td>启动并运行所有服务</td></tr><tr><td><code>docker-compose down</code></td><td>停止并删除所有服务</td></tr><tr><td><code>docker-compose ps</code></td><td>查看所有服务状态</td></tr><tr><td><code>docker-compose logs</code></td><td>查看所有服务日志</td></tr></tbody></table>',17),a=[c];function n(l,i,k,s,h,g){return e(),d("div",null,a)}const b=t(r,[["render",n]]);export{u as __pageData,b as default};
